<?php

/**
 * ProcessWire Rate Fieldtype
 *
 * Fieldtype that gives a simple star rating on your website.
 *
 * by @jonathandart
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2010 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

require_once dirname(__FILE__) . "/RateHelper.php";

class FieldtypeRate extends Fieldtype {

	public static function getModuleInfo() {

		return array(
			'title' => 'Rate',
			'version' => 200,
			'summary' => 'Field that stores ratings',
			'installs' => array('InputfieldRate')
		);
	}

	public function getInputfield(Page $page, Field $field) {

		$inputfield = $this->modules->get('InputfieldRate'); 
		return $inputfield; 
	}

	public function ___getCompatibleFieldtypes(Field $field) {

		// there are no other fieldtypes compatible with this one
		return null;
	}


	public function sanitizeValue(Page $page, Field $field, $value) {

		if(!$value instanceof RateHelper) 
			$value = $this->getBlankValue($page, $field);

		return $value;
	}

	public function getBlankValue(Page $page, Field $field) {

		$ape = new RateHelper($field, $page); 
		$ape->vote_log = "\n";
		return $ape;
	}

	public function ___wakeupValue(Page $page, Field $field, $value) {

		// get a blank RateHelper instance
		$RateHelper = $this->getBlankValue($page, $field, $value);
		
		$RateHelper->vote_log = $value['vote_log'];
		$RateHelper->vote_count = $value['vote_count'];
		$RateHelper->vote_sum = $value['vote_sum'];

		return $RateHelper;
	}

	public function ___sleepValue(Page $page, Field $field, $value) {

		if(!$value instanceof RateHelper) 
			throw new WireException("Expecting an instance of RateHelper");

		return array(
			'vote_log' => $value->vote_log, 
			'vote_count' => $value->vote_count,
			'vote_sum' => $value->vote_sum
		);
	}

	public function getDatabaseSchema(Field $field) {

		$schema = parent::getDatabaseSchema($field); 
		$schema['vote_log'] = 'text NOT NULL';
		$schema['vote_count'] = 'int unsigned default 0';
		$schema['vote_sum'] = 'int unsigned default 0';
		return $schema;
	}

	public function ___getConfigInputfields(Field $field) {

		$inputfields = parent::___getConfigInputfields($field);

		$f = $this->modules->get('InputfieldSelect');
		$f->attr('name', 'star_count'); 
		$f->attr('value', $field->star_count ? $field->star_count : 5); 
		$f->label = 'How many stars?';
		$f->required = true; 

		for ($i = 1; $i <= 20; $i++)
			$f->addOption($i, $i);

		$inputfields->append($f); 	

		$f = $this->modules->get('InputfieldSelect');
		$f->attr('name', 'default_score'); 
		$f->attr('value', $field->default_score ? $field->default_score : 3); 
		$f->label = 'What should the default score be?';
		$f->required = true;

		for ($i = 0; $i <= 5; $i++)
			$f->addOption($i, $i);

		$inputfields->append($f); 

		$f = $this->modules->get('InputfieldText');
		$f->attr('name', 'thank_you_message'); 
		$f->attr('value', $field->thank_you_message ? $field->thank_you_message : 'Thanks for your vote!'); 
		$f->label = 'What should the user see after voting?';
		$f->required = true;

		$inputfields->append($f); 

		return $inputfields; 
	}
}
